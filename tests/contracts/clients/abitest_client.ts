import algosdk from "algosdk";
import * as bkr from "beaker-ts";
export class AbiTest extends bkr.ApplicationClient {
    desc: string = "";
    override appSchema: bkr.Schema = { declared: { gRef: { type: bkr.AVMType.bytes, key: "gRef", desc: "", static: false }, gMap: { type: bkr.AVMType.bytes, key: "gMap", desc: "", static: false } }, reserved: {} };
    override acctSchema: bkr.Schema = { declared: { lRef: { type: bkr.AVMType.bytes, key: "lRef", desc: "", static: false }, lMap: { type: bkr.AVMType.bytes, key: "lMap", desc: "", static: false } }, reserved: {} };
    override approvalProgram: string = "";
    override clearProgram: string = "I3ByYWdtYSB2ZXJzaW9uIDgKaW50IDEKcmV0dXJu";
    override methods: algosdk.ABIMethod[] = [
        new algosdk.ABIMethod({ name: "staticArray", desc: "", args: [], returns: { type: "uint64", desc: "" } }),
        new algosdk.ABIMethod({ name: "returnStaticArray", desc: "", args: [], returns: { type: "uint64[3]", desc: "" } }),
        new algosdk.ABIMethod({ name: "staticArrayArg", desc: "", args: [{ type: "uint64[3]", name: "a", desc: "" }], returns: { type: "uint64", desc: "" } }),
        new algosdk.ABIMethod({ name: "nonLiteralStaticArrayElements", desc: "", args: [], returns: { type: "uint64", desc: "" } }),
        new algosdk.ABIMethod({ name: "mixedStaticArrayElements", desc: "", args: [], returns: { type: "uint64", desc: "" } }),
        new algosdk.ABIMethod({ name: "nonLiteralStaticArrayAccess", desc: "", args: [], returns: { type: "uint64", desc: "" } }),
        new algosdk.ABIMethod({ name: "setStaticArrayElement", desc: "", args: [], returns: { type: "uint64", desc: "" } }),
        new algosdk.ABIMethod({ name: "staticArrayInStorageRef", desc: "", args: [], returns: { type: "uint64[3]", desc: "" } }),
        new algosdk.ABIMethod({ name: "updateStaticArrayInStorageRef", desc: "", args: [], returns: { type: "uint64[3]", desc: "" } }),
        new algosdk.ABIMethod({ name: "staticArrayInStorageMap", desc: "", args: [], returns: { type: "uint64[3]", desc: "" } }),
        new algosdk.ABIMethod({ name: "updateStaticArrayInStorageMap", desc: "", args: [], returns: { type: "uint64[3]", desc: "" } }),
        new algosdk.ABIMethod({ name: "nestedStaticArray", desc: "", args: [], returns: { type: "uint64", desc: "" } }),
        new algosdk.ABIMethod({ name: "updateNestedStaticArrayElement", desc: "", args: [], returns: { type: "uint64", desc: "" } }),
        new algosdk.ABIMethod({ name: "updateNestedStaticArray", desc: "", args: [], returns: { type: "uint64", desc: "" } }),
        new algosdk.ABIMethod({ name: "threeDimensionalUint16Array", desc: "", args: [], returns: { type: "uint16", desc: "" } }),
        new algosdk.ABIMethod({ name: "simpleTuple", desc: "", args: [], returns: { type: "uint16", desc: "" } }),
        new algosdk.ABIMethod({ name: "arrayInTuple", desc: "", args: [], returns: { type: "uint64", desc: "" } }),
        new algosdk.ABIMethod({ name: "tupleInArray", desc: "", args: [], returns: { type: "uint16", desc: "" } }),
        new algosdk.ABIMethod({ name: "tupleInTuple", desc: "", args: [], returns: { type: "uint64", desc: "" } }),
        new algosdk.ABIMethod({ name: "shortTypeNotation", desc: "", args: [], returns: { type: "uint16", desc: "" } }),
        new algosdk.ABIMethod({ name: "disgusting", desc: "", args: [], returns: { type: "uint64", desc: "" } }),
        new algosdk.ABIMethod({ name: "returnTuple", desc: "", args: [], returns: { type: "(uint64,uint16,uint64)", desc: "" } }),
        new algosdk.ABIMethod({ name: "tupleArg", desc: "", args: [{ type: "(uint64,uint16,uint64)", name: "a", desc: "" }], returns: { type: "uint16", desc: "" } }),
        new algosdk.ABIMethod({ name: "dynamicArray", desc: "", args: [], returns: { type: "uint64", desc: "" } }),
        new algosdk.ABIMethod({ name: "returnDynamicArray", desc: "", args: [], returns: { type: "uint64[]", desc: "" } }),
        new algosdk.ABIMethod({ name: "dynamicArrayArg", desc: "", args: [{ type: "uint64[]", name: "a", desc: "" }], returns: { type: "uint64", desc: "" } }),
        new algosdk.ABIMethod({ name: "updateDynamicArrayElement", desc: "", args: [], returns: { type: "uint64", desc: "" } }),
        new algosdk.ABIMethod({ name: "dynamicTupleArray", desc: "", args: [], returns: { type: "uint64", desc: "" } }),
        new algosdk.ABIMethod({ name: "returnTupleWithDyamicArray", desc: "", args: [], returns: { type: "(uint64,uint16,uint64[],uint16[])", desc: "" } }),
        new algosdk.ABIMethod({ name: "returnDynamicArrayFromTuple", desc: "", args: [], returns: { type: "uint8[]", desc: "" } }),
        new algosdk.ABIMethod({ name: "updateDynamicArrayInTuple", desc: "", args: [], returns: { type: "(uint8,uint16[],uint8[],uint16[],uint8[])", desc: "" } }),
        new algosdk.ABIMethod({ name: "nonLiteralDynamicElementInTuple", desc: "", args: [], returns: { type: "(uint8,uint16,uint8[],uint16[],uint8[])", desc: "" } }),
        new algosdk.ABIMethod({ name: "arrayPush", desc: "", args: [], returns: { type: "uint16[]", desc: "" } }),
        new algosdk.ABIMethod({ name: "arrayPop", desc: "", args: [], returns: { type: "uint16[]", desc: "" } }),
        new algosdk.ABIMethod({ name: "arrayPopValue", desc: "", args: [], returns: { type: "uint16", desc: "" } }),
        new algosdk.ABIMethod({ name: "arraySplice", desc: "", args: [], returns: { type: "uint64[]", desc: "" } }),
        new algosdk.ABIMethod({ name: "arraySpliceValue", desc: "", args: [], returns: { type: "uint16[]", desc: "" } }),
        new algosdk.ABIMethod({ name: "dynamicArrayElements", desc: "", args: [], returns: { type: "uint16[]", desc: "" } }),
        new algosdk.ABIMethod({ name: "spliceLastElement", desc: "", args: [], returns: { type: "uint16[]", desc: "" } }),
        new algosdk.ABIMethod({ name: "spliceLastElementValue", desc: "", args: [], returns: { type: "uint16[]", desc: "" } }),
        new algosdk.ABIMethod({ name: "spliceFirstElement", desc: "", args: [], returns: { type: "uint16[]", desc: "" } }),
        new algosdk.ABIMethod({ name: "spliceFirstElementValue", desc: "", args: [], returns: { type: "uint16[]", desc: "" } }),
        new algosdk.ABIMethod({ name: "stringReturn", desc: "", args: [], returns: { type: "string", desc: "" } }),
        new algosdk.ABIMethod({ name: "stringArg", desc: "", args: [{ type: "string", name: "s", desc: "" }], returns: { type: "void", desc: "" } }),
        new algosdk.ABIMethod({ name: "stringInTuple", desc: "", args: [], returns: { type: "(uint16,uint8[],string,uint8[])", desc: "" } }),
        new algosdk.ABIMethod({ name: "accesStringInTuple", desc: "", args: [], returns: { type: "string", desc: "" } }),
        new algosdk.ABIMethod({ name: "updateStringInTuple", desc: "", args: [], returns: { type: "(uint8,uint16[],string,uint16[],uint8[])", desc: "" } }),
        new algosdk.ABIMethod({ name: "updateTupleWithOnlyDynamicTypes", desc: "", args: [], returns: { type: "(uint16[],uint16[],uint16[])", desc: "" } }),
        new algosdk.ABIMethod({ name: "shortenDynamicElementInTuple", desc: "", args: [], returns: { type: "(uint16[],uint16[],uint16[])", desc: "" } }),
        new algosdk.ABIMethod({ name: "namedTuple", desc: "", args: [], returns: { type: "string", desc: "" } }),
        new algosdk.ABIMethod({ name: "updateNamedTuple", desc: "", args: [], returns: { type: "string", desc: "" } }),
        new algosdk.ABIMethod({ name: "customTypes", desc: "", args: [], returns: { type: "string", desc: "" } }),
        new algosdk.ABIMethod({ name: "staticStringArrayArg", desc: "", args: [{ type: "string[3]", name: "a", desc: "" }], returns: { type: "string", desc: "" } }),
        new algosdk.ABIMethod({ name: "dynamicAccessOfDynamicElementInStaticArray", desc: "", args: [{ type: "string[3]", name: "a", desc: "" }], returns: { type: "string", desc: "" } })
    ];
    async staticArray(txnParams?: bkr.TransactionOverrides): Promise<bkr.ABIResult<bigint>> {
        const result = await this.execute(await this.compose.staticArray(txnParams));
        return new bkr.ABIResult<bigint>(result, result.returnValue as bigint);
    }
    async returnStaticArray(txnParams?: bkr.TransactionOverrides): Promise<bkr.ABIResult<bigint[]>> {
        const result = await this.execute(await this.compose.returnStaticArray(txnParams));
        return new bkr.ABIResult<bigint[]>(result, result.returnValue as bigint[]);
    }
    async staticArrayArg(args: {
        a: bigint[];
    }, txnParams?: bkr.TransactionOverrides): Promise<bkr.ABIResult<bigint>> {
        const result = await this.execute(await this.compose.staticArrayArg({ a: args.a }, txnParams));
        return new bkr.ABIResult<bigint>(result, result.returnValue as bigint);
    }
    async nonLiteralStaticArrayElements(txnParams?: bkr.TransactionOverrides): Promise<bkr.ABIResult<bigint>> {
        const result = await this.execute(await this.compose.nonLiteralStaticArrayElements(txnParams));
        return new bkr.ABIResult<bigint>(result, result.returnValue as bigint);
    }
    async mixedStaticArrayElements(txnParams?: bkr.TransactionOverrides): Promise<bkr.ABIResult<bigint>> {
        const result = await this.execute(await this.compose.mixedStaticArrayElements(txnParams));
        return new bkr.ABIResult<bigint>(result, result.returnValue as bigint);
    }
    async nonLiteralStaticArrayAccess(txnParams?: bkr.TransactionOverrides): Promise<bkr.ABIResult<bigint>> {
        const result = await this.execute(await this.compose.nonLiteralStaticArrayAccess(txnParams));
        return new bkr.ABIResult<bigint>(result, result.returnValue as bigint);
    }
    async setStaticArrayElement(txnParams?: bkr.TransactionOverrides): Promise<bkr.ABIResult<bigint>> {
        const result = await this.execute(await this.compose.setStaticArrayElement(txnParams));
        return new bkr.ABIResult<bigint>(result, result.returnValue as bigint);
    }
    async staticArrayInStorageRef(txnParams?: bkr.TransactionOverrides): Promise<bkr.ABIResult<bigint[]>> {
        const result = await this.execute(await this.compose.staticArrayInStorageRef(txnParams));
        return new bkr.ABIResult<bigint[]>(result, result.returnValue as bigint[]);
    }
    async updateStaticArrayInStorageRef(txnParams?: bkr.TransactionOverrides): Promise<bkr.ABIResult<bigint[]>> {
        const result = await this.execute(await this.compose.updateStaticArrayInStorageRef(txnParams));
        return new bkr.ABIResult<bigint[]>(result, result.returnValue as bigint[]);
    }
    async staticArrayInStorageMap(txnParams?: bkr.TransactionOverrides): Promise<bkr.ABIResult<bigint[]>> {
        const result = await this.execute(await this.compose.staticArrayInStorageMap(txnParams));
        return new bkr.ABIResult<bigint[]>(result, result.returnValue as bigint[]);
    }
    async updateStaticArrayInStorageMap(txnParams?: bkr.TransactionOverrides): Promise<bkr.ABIResult<bigint[]>> {
        const result = await this.execute(await this.compose.updateStaticArrayInStorageMap(txnParams));
        return new bkr.ABIResult<bigint[]>(result, result.returnValue as bigint[]);
    }
    async nestedStaticArray(txnParams?: bkr.TransactionOverrides): Promise<bkr.ABIResult<bigint>> {
        const result = await this.execute(await this.compose.nestedStaticArray(txnParams));
        return new bkr.ABIResult<bigint>(result, result.returnValue as bigint);
    }
    async updateNestedStaticArrayElement(txnParams?: bkr.TransactionOverrides): Promise<bkr.ABIResult<bigint>> {
        const result = await this.execute(await this.compose.updateNestedStaticArrayElement(txnParams));
        return new bkr.ABIResult<bigint>(result, result.returnValue as bigint);
    }
    async updateNestedStaticArray(txnParams?: bkr.TransactionOverrides): Promise<bkr.ABIResult<bigint>> {
        const result = await this.execute(await this.compose.updateNestedStaticArray(txnParams));
        return new bkr.ABIResult<bigint>(result, result.returnValue as bigint);
    }
    async threeDimensionalUint16Array(txnParams?: bkr.TransactionOverrides): Promise<bkr.ABIResult<bigint>> {
        const result = await this.execute(await this.compose.threeDimensionalUint16Array(txnParams));
        return new bkr.ABIResult<bigint>(result, result.returnValue as bigint);
    }
    async simpleTuple(txnParams?: bkr.TransactionOverrides): Promise<bkr.ABIResult<bigint>> {
        const result = await this.execute(await this.compose.simpleTuple(txnParams));
        return new bkr.ABIResult<bigint>(result, result.returnValue as bigint);
    }
    async arrayInTuple(txnParams?: bkr.TransactionOverrides): Promise<bkr.ABIResult<bigint>> {
        const result = await this.execute(await this.compose.arrayInTuple(txnParams));
        return new bkr.ABIResult<bigint>(result, result.returnValue as bigint);
    }
    async tupleInArray(txnParams?: bkr.TransactionOverrides): Promise<bkr.ABIResult<bigint>> {
        const result = await this.execute(await this.compose.tupleInArray(txnParams));
        return new bkr.ABIResult<bigint>(result, result.returnValue as bigint);
    }
    async tupleInTuple(txnParams?: bkr.TransactionOverrides): Promise<bkr.ABIResult<bigint>> {
        const result = await this.execute(await this.compose.tupleInTuple(txnParams));
        return new bkr.ABIResult<bigint>(result, result.returnValue as bigint);
    }
    async shortTypeNotation(txnParams?: bkr.TransactionOverrides): Promise<bkr.ABIResult<bigint>> {
        const result = await this.execute(await this.compose.shortTypeNotation(txnParams));
        return new bkr.ABIResult<bigint>(result, result.returnValue as bigint);
    }
    async disgusting(txnParams?: bkr.TransactionOverrides): Promise<bkr.ABIResult<bigint>> {
        const result = await this.execute(await this.compose.disgusting(txnParams));
        return new bkr.ABIResult<bigint>(result, result.returnValue as bigint);
    }
    async returnTuple(txnParams?: bkr.TransactionOverrides): Promise<bkr.ABIResult<[
        bigint,
        bigint,
        bigint
    ]>> {
        const result = await this.execute(await this.compose.returnTuple(txnParams));
        return new bkr.ABIResult<[
            bigint,
            bigint,
            bigint
        ]>(result, result.returnValue as [
            bigint,
            bigint,
            bigint
        ]);
    }
    async tupleArg(args: {
        a: [
            bigint,
            bigint,
            bigint
        ];
    }, txnParams?: bkr.TransactionOverrides): Promise<bkr.ABIResult<bigint>> {
        const result = await this.execute(await this.compose.tupleArg({ a: args.a }, txnParams));
        return new bkr.ABIResult<bigint>(result, result.returnValue as bigint);
    }
    async dynamicArray(txnParams?: bkr.TransactionOverrides): Promise<bkr.ABIResult<bigint>> {
        const result = await this.execute(await this.compose.dynamicArray(txnParams));
        return new bkr.ABIResult<bigint>(result, result.returnValue as bigint);
    }
    async returnDynamicArray(txnParams?: bkr.TransactionOverrides): Promise<bkr.ABIResult<bigint[]>> {
        const result = await this.execute(await this.compose.returnDynamicArray(txnParams));
        return new bkr.ABIResult<bigint[]>(result, result.returnValue as bigint[]);
    }
    async dynamicArrayArg(args: {
        a: bigint[];
    }, txnParams?: bkr.TransactionOverrides): Promise<bkr.ABIResult<bigint>> {
        const result = await this.execute(await this.compose.dynamicArrayArg({ a: args.a }, txnParams));
        return new bkr.ABIResult<bigint>(result, result.returnValue as bigint);
    }
    async updateDynamicArrayElement(txnParams?: bkr.TransactionOverrides): Promise<bkr.ABIResult<bigint>> {
        const result = await this.execute(await this.compose.updateDynamicArrayElement(txnParams));
        return new bkr.ABIResult<bigint>(result, result.returnValue as bigint);
    }
    async dynamicTupleArray(txnParams?: bkr.TransactionOverrides): Promise<bkr.ABIResult<bigint>> {
        const result = await this.execute(await this.compose.dynamicTupleArray(txnParams));
        return new bkr.ABIResult<bigint>(result, result.returnValue as bigint);
    }
    async returnTupleWithDyamicArray(txnParams?: bkr.TransactionOverrides): Promise<bkr.ABIResult<[
        bigint,
        bigint,
        bigint[],
        bigint[]
    ]>> {
        const result = await this.execute(await this.compose.returnTupleWithDyamicArray(txnParams));
        return new bkr.ABIResult<[
            bigint,
            bigint,
            bigint[],
            bigint[]
        ]>(result, result.returnValue as [
            bigint,
            bigint,
            bigint[],
            bigint[]
        ]);
    }
    async returnDynamicArrayFromTuple(txnParams?: bkr.TransactionOverrides): Promise<bkr.ABIResult<bigint[]>> {
        const result = await this.execute(await this.compose.returnDynamicArrayFromTuple(txnParams));
        return new bkr.ABIResult<bigint[]>(result, result.returnValue as bigint[]);
    }
    async updateDynamicArrayInTuple(txnParams?: bkr.TransactionOverrides): Promise<bkr.ABIResult<[
        bigint,
        bigint[],
        bigint[],
        bigint[],
        bigint[]
    ]>> {
        const result = await this.execute(await this.compose.updateDynamicArrayInTuple(txnParams));
        return new bkr.ABIResult<[
            bigint,
            bigint[],
            bigint[],
            bigint[],
            bigint[]
        ]>(result, result.returnValue as [
            bigint,
            bigint[],
            bigint[],
            bigint[],
            bigint[]
        ]);
    }
    async nonLiteralDynamicElementInTuple(txnParams?: bkr.TransactionOverrides): Promise<bkr.ABIResult<[
        bigint,
        bigint,
        bigint[],
        bigint[],
        bigint[]
    ]>> {
        const result = await this.execute(await this.compose.nonLiteralDynamicElementInTuple(txnParams));
        return new bkr.ABIResult<[
            bigint,
            bigint,
            bigint[],
            bigint[],
            bigint[]
        ]>(result, result.returnValue as [
            bigint,
            bigint,
            bigint[],
            bigint[],
            bigint[]
        ]);
    }
    async arrayPush(txnParams?: bkr.TransactionOverrides): Promise<bkr.ABIResult<bigint[]>> {
        const result = await this.execute(await this.compose.arrayPush(txnParams));
        return new bkr.ABIResult<bigint[]>(result, result.returnValue as bigint[]);
    }
    async arrayPop(txnParams?: bkr.TransactionOverrides): Promise<bkr.ABIResult<bigint[]>> {
        const result = await this.execute(await this.compose.arrayPop(txnParams));
        return new bkr.ABIResult<bigint[]>(result, result.returnValue as bigint[]);
    }
    async arrayPopValue(txnParams?: bkr.TransactionOverrides): Promise<bkr.ABIResult<bigint>> {
        const result = await this.execute(await this.compose.arrayPopValue(txnParams));
        return new bkr.ABIResult<bigint>(result, result.returnValue as bigint);
    }
    async arraySplice(txnParams?: bkr.TransactionOverrides): Promise<bkr.ABIResult<bigint[]>> {
        const result = await this.execute(await this.compose.arraySplice(txnParams));
        return new bkr.ABIResult<bigint[]>(result, result.returnValue as bigint[]);
    }
    async arraySpliceValue(txnParams?: bkr.TransactionOverrides): Promise<bkr.ABIResult<bigint[]>> {
        const result = await this.execute(await this.compose.arraySpliceValue(txnParams));
        return new bkr.ABIResult<bigint[]>(result, result.returnValue as bigint[]);
    }
    async dynamicArrayElements(txnParams?: bkr.TransactionOverrides): Promise<bkr.ABIResult<bigint[]>> {
        const result = await this.execute(await this.compose.dynamicArrayElements(txnParams));
        return new bkr.ABIResult<bigint[]>(result, result.returnValue as bigint[]);
    }
    async spliceLastElement(txnParams?: bkr.TransactionOverrides): Promise<bkr.ABIResult<bigint[]>> {
        const result = await this.execute(await this.compose.spliceLastElement(txnParams));
        return new bkr.ABIResult<bigint[]>(result, result.returnValue as bigint[]);
    }
    async spliceLastElementValue(txnParams?: bkr.TransactionOverrides): Promise<bkr.ABIResult<bigint[]>> {
        const result = await this.execute(await this.compose.spliceLastElementValue(txnParams));
        return new bkr.ABIResult<bigint[]>(result, result.returnValue as bigint[]);
    }
    async spliceFirstElement(txnParams?: bkr.TransactionOverrides): Promise<bkr.ABIResult<bigint[]>> {
        const result = await this.execute(await this.compose.spliceFirstElement(txnParams));
        return new bkr.ABIResult<bigint[]>(result, result.returnValue as bigint[]);
    }
    async spliceFirstElementValue(txnParams?: bkr.TransactionOverrides): Promise<bkr.ABIResult<bigint[]>> {
        const result = await this.execute(await this.compose.spliceFirstElementValue(txnParams));
        return new bkr.ABIResult<bigint[]>(result, result.returnValue as bigint[]);
    }
    async stringReturn(txnParams?: bkr.TransactionOverrides): Promise<bkr.ABIResult<string>> {
        const result = await this.execute(await this.compose.stringReturn(txnParams));
        return new bkr.ABIResult<string>(result, result.returnValue as string);
    }
    async stringArg(args: {
        s: string;
    }, txnParams?: bkr.TransactionOverrides): Promise<bkr.ABIResult<void>> {
        const result = await this.execute(await this.compose.stringArg({ s: args.s }, txnParams));
        return new bkr.ABIResult<void>(result);
    }
    async stringInTuple(txnParams?: bkr.TransactionOverrides): Promise<bkr.ABIResult<[
        bigint,
        bigint[],
        string,
        bigint[]
    ]>> {
        const result = await this.execute(await this.compose.stringInTuple(txnParams));
        return new bkr.ABIResult<[
            bigint,
            bigint[],
            string,
            bigint[]
        ]>(result, result.returnValue as [
            bigint,
            bigint[],
            string,
            bigint[]
        ]);
    }
    async accesStringInTuple(txnParams?: bkr.TransactionOverrides): Promise<bkr.ABIResult<string>> {
        const result = await this.execute(await this.compose.accesStringInTuple(txnParams));
        return new bkr.ABIResult<string>(result, result.returnValue as string);
    }
    async updateStringInTuple(txnParams?: bkr.TransactionOverrides): Promise<bkr.ABIResult<[
        bigint,
        bigint[],
        string,
        bigint[],
        bigint[]
    ]>> {
        const result = await this.execute(await this.compose.updateStringInTuple(txnParams));
        return new bkr.ABIResult<[
            bigint,
            bigint[],
            string,
            bigint[],
            bigint[]
        ]>(result, result.returnValue as [
            bigint,
            bigint[],
            string,
            bigint[],
            bigint[]
        ]);
    }
    async updateTupleWithOnlyDynamicTypes(txnParams?: bkr.TransactionOverrides): Promise<bkr.ABIResult<[
        bigint[],
        bigint[],
        bigint[]
    ]>> {
        const result = await this.execute(await this.compose.updateTupleWithOnlyDynamicTypes(txnParams));
        return new bkr.ABIResult<[
            bigint[],
            bigint[],
            bigint[]
        ]>(result, result.returnValue as [
            bigint[],
            bigint[],
            bigint[]
        ]);
    }
    async shortenDynamicElementInTuple(txnParams?: bkr.TransactionOverrides): Promise<bkr.ABIResult<[
        bigint[],
        bigint[],
        bigint[]
    ]>> {
        const result = await this.execute(await this.compose.shortenDynamicElementInTuple(txnParams));
        return new bkr.ABIResult<[
            bigint[],
            bigint[],
            bigint[]
        ]>(result, result.returnValue as [
            bigint[],
            bigint[],
            bigint[]
        ]);
    }
    async namedTuple(txnParams?: bkr.TransactionOverrides): Promise<bkr.ABIResult<string>> {
        const result = await this.execute(await this.compose.namedTuple(txnParams));
        return new bkr.ABIResult<string>(result, result.returnValue as string);
    }
    async updateNamedTuple(txnParams?: bkr.TransactionOverrides): Promise<bkr.ABIResult<string>> {
        const result = await this.execute(await this.compose.updateNamedTuple(txnParams));
        return new bkr.ABIResult<string>(result, result.returnValue as string);
    }
    async customTypes(txnParams?: bkr.TransactionOverrides): Promise<bkr.ABIResult<string>> {
        const result = await this.execute(await this.compose.customTypes(txnParams));
        return new bkr.ABIResult<string>(result, result.returnValue as string);
    }
    async staticStringArrayArg(args: {
        a: string[];
    }, txnParams?: bkr.TransactionOverrides): Promise<bkr.ABIResult<string>> {
        const result = await this.execute(await this.compose.staticStringArrayArg({ a: args.a }, txnParams));
        return new bkr.ABIResult<string>(result, result.returnValue as string);
    }
    async dynamicAccessOfDynamicElementInStaticArray(args: {
        a: string[];
    }, txnParams?: bkr.TransactionOverrides): Promise<bkr.ABIResult<string>> {
        const result = await this.execute(await this.compose.dynamicAccessOfDynamicElementInStaticArray({ a: args.a }, txnParams));
        return new bkr.ABIResult<string>(result, result.returnValue as string);
    }
    compose = {
        staticArray: async (txnParams?: bkr.TransactionOverrides, atc?: algosdk.AtomicTransactionComposer): Promise<algosdk.AtomicTransactionComposer> => {
            return this.addMethodCall(algosdk.getMethodByName(this.methods, "staticArray"), {}, txnParams, atc);
        },
        returnStaticArray: async (txnParams?: bkr.TransactionOverrides, atc?: algosdk.AtomicTransactionComposer): Promise<algosdk.AtomicTransactionComposer> => {
            return this.addMethodCall(algosdk.getMethodByName(this.methods, "returnStaticArray"), {}, txnParams, atc);
        },
        staticArrayArg: async (args: {
            a: bigint[];
        }, txnParams?: bkr.TransactionOverrides, atc?: algosdk.AtomicTransactionComposer): Promise<algosdk.AtomicTransactionComposer> => {
            return this.addMethodCall(algosdk.getMethodByName(this.methods, "staticArrayArg"), { a: args.a }, txnParams, atc);
        },
        nonLiteralStaticArrayElements: async (txnParams?: bkr.TransactionOverrides, atc?: algosdk.AtomicTransactionComposer): Promise<algosdk.AtomicTransactionComposer> => {
            return this.addMethodCall(algosdk.getMethodByName(this.methods, "nonLiteralStaticArrayElements"), {}, txnParams, atc);
        },
        mixedStaticArrayElements: async (txnParams?: bkr.TransactionOverrides, atc?: algosdk.AtomicTransactionComposer): Promise<algosdk.AtomicTransactionComposer> => {
            return this.addMethodCall(algosdk.getMethodByName(this.methods, "mixedStaticArrayElements"), {}, txnParams, atc);
        },
        nonLiteralStaticArrayAccess: async (txnParams?: bkr.TransactionOverrides, atc?: algosdk.AtomicTransactionComposer): Promise<algosdk.AtomicTransactionComposer> => {
            return this.addMethodCall(algosdk.getMethodByName(this.methods, "nonLiteralStaticArrayAccess"), {}, txnParams, atc);
        },
        setStaticArrayElement: async (txnParams?: bkr.TransactionOverrides, atc?: algosdk.AtomicTransactionComposer): Promise<algosdk.AtomicTransactionComposer> => {
            return this.addMethodCall(algosdk.getMethodByName(this.methods, "setStaticArrayElement"), {}, txnParams, atc);
        },
        staticArrayInStorageRef: async (txnParams?: bkr.TransactionOverrides, atc?: algosdk.AtomicTransactionComposer): Promise<algosdk.AtomicTransactionComposer> => {
            return this.addMethodCall(algosdk.getMethodByName(this.methods, "staticArrayInStorageRef"), {}, txnParams, atc);
        },
        updateStaticArrayInStorageRef: async (txnParams?: bkr.TransactionOverrides, atc?: algosdk.AtomicTransactionComposer): Promise<algosdk.AtomicTransactionComposer> => {
            return this.addMethodCall(algosdk.getMethodByName(this.methods, "updateStaticArrayInStorageRef"), {}, txnParams, atc);
        },
        staticArrayInStorageMap: async (txnParams?: bkr.TransactionOverrides, atc?: algosdk.AtomicTransactionComposer): Promise<algosdk.AtomicTransactionComposer> => {
            return this.addMethodCall(algosdk.getMethodByName(this.methods, "staticArrayInStorageMap"), {}, txnParams, atc);
        },
        updateStaticArrayInStorageMap: async (txnParams?: bkr.TransactionOverrides, atc?: algosdk.AtomicTransactionComposer): Promise<algosdk.AtomicTransactionComposer> => {
            return this.addMethodCall(algosdk.getMethodByName(this.methods, "updateStaticArrayInStorageMap"), {}, txnParams, atc);
        },
        nestedStaticArray: async (txnParams?: bkr.TransactionOverrides, atc?: algosdk.AtomicTransactionComposer): Promise<algosdk.AtomicTransactionComposer> => {
            return this.addMethodCall(algosdk.getMethodByName(this.methods, "nestedStaticArray"), {}, txnParams, atc);
        },
        updateNestedStaticArrayElement: async (txnParams?: bkr.TransactionOverrides, atc?: algosdk.AtomicTransactionComposer): Promise<algosdk.AtomicTransactionComposer> => {
            return this.addMethodCall(algosdk.getMethodByName(this.methods, "updateNestedStaticArrayElement"), {}, txnParams, atc);
        },
        updateNestedStaticArray: async (txnParams?: bkr.TransactionOverrides, atc?: algosdk.AtomicTransactionComposer): Promise<algosdk.AtomicTransactionComposer> => {
            return this.addMethodCall(algosdk.getMethodByName(this.methods, "updateNestedStaticArray"), {}, txnParams, atc);
        },
        threeDimensionalUint16Array: async (txnParams?: bkr.TransactionOverrides, atc?: algosdk.AtomicTransactionComposer): Promise<algosdk.AtomicTransactionComposer> => {
            return this.addMethodCall(algosdk.getMethodByName(this.methods, "threeDimensionalUint16Array"), {}, txnParams, atc);
        },
        simpleTuple: async (txnParams?: bkr.TransactionOverrides, atc?: algosdk.AtomicTransactionComposer): Promise<algosdk.AtomicTransactionComposer> => {
            return this.addMethodCall(algosdk.getMethodByName(this.methods, "simpleTuple"), {}, txnParams, atc);
        },
        arrayInTuple: async (txnParams?: bkr.TransactionOverrides, atc?: algosdk.AtomicTransactionComposer): Promise<algosdk.AtomicTransactionComposer> => {
            return this.addMethodCall(algosdk.getMethodByName(this.methods, "arrayInTuple"), {}, txnParams, atc);
        },
        tupleInArray: async (txnParams?: bkr.TransactionOverrides, atc?: algosdk.AtomicTransactionComposer): Promise<algosdk.AtomicTransactionComposer> => {
            return this.addMethodCall(algosdk.getMethodByName(this.methods, "tupleInArray"), {}, txnParams, atc);
        },
        tupleInTuple: async (txnParams?: bkr.TransactionOverrides, atc?: algosdk.AtomicTransactionComposer): Promise<algosdk.AtomicTransactionComposer> => {
            return this.addMethodCall(algosdk.getMethodByName(this.methods, "tupleInTuple"), {}, txnParams, atc);
        },
        shortTypeNotation: async (txnParams?: bkr.TransactionOverrides, atc?: algosdk.AtomicTransactionComposer): Promise<algosdk.AtomicTransactionComposer> => {
            return this.addMethodCall(algosdk.getMethodByName(this.methods, "shortTypeNotation"), {}, txnParams, atc);
        },
        disgusting: async (txnParams?: bkr.TransactionOverrides, atc?: algosdk.AtomicTransactionComposer): Promise<algosdk.AtomicTransactionComposer> => {
            return this.addMethodCall(algosdk.getMethodByName(this.methods, "disgusting"), {}, txnParams, atc);
        },
        returnTuple: async (txnParams?: bkr.TransactionOverrides, atc?: algosdk.AtomicTransactionComposer): Promise<algosdk.AtomicTransactionComposer> => {
            return this.addMethodCall(algosdk.getMethodByName(this.methods, "returnTuple"), {}, txnParams, atc);
        },
        tupleArg: async (args: {
            a: [
                bigint,
                bigint,
                bigint
            ];
        }, txnParams?: bkr.TransactionOverrides, atc?: algosdk.AtomicTransactionComposer): Promise<algosdk.AtomicTransactionComposer> => {
            return this.addMethodCall(algosdk.getMethodByName(this.methods, "tupleArg"), { a: args.a }, txnParams, atc);
        },
        dynamicArray: async (txnParams?: bkr.TransactionOverrides, atc?: algosdk.AtomicTransactionComposer): Promise<algosdk.AtomicTransactionComposer> => {
            return this.addMethodCall(algosdk.getMethodByName(this.methods, "dynamicArray"), {}, txnParams, atc);
        },
        returnDynamicArray: async (txnParams?: bkr.TransactionOverrides, atc?: algosdk.AtomicTransactionComposer): Promise<algosdk.AtomicTransactionComposer> => {
            return this.addMethodCall(algosdk.getMethodByName(this.methods, "returnDynamicArray"), {}, txnParams, atc);
        },
        dynamicArrayArg: async (args: {
            a: bigint[];
        }, txnParams?: bkr.TransactionOverrides, atc?: algosdk.AtomicTransactionComposer): Promise<algosdk.AtomicTransactionComposer> => {
            return this.addMethodCall(algosdk.getMethodByName(this.methods, "dynamicArrayArg"), { a: args.a }, txnParams, atc);
        },
        updateDynamicArrayElement: async (txnParams?: bkr.TransactionOverrides, atc?: algosdk.AtomicTransactionComposer): Promise<algosdk.AtomicTransactionComposer> => {
            return this.addMethodCall(algosdk.getMethodByName(this.methods, "updateDynamicArrayElement"), {}, txnParams, atc);
        },
        dynamicTupleArray: async (txnParams?: bkr.TransactionOverrides, atc?: algosdk.AtomicTransactionComposer): Promise<algosdk.AtomicTransactionComposer> => {
            return this.addMethodCall(algosdk.getMethodByName(this.methods, "dynamicTupleArray"), {}, txnParams, atc);
        },
        returnTupleWithDyamicArray: async (txnParams?: bkr.TransactionOverrides, atc?: algosdk.AtomicTransactionComposer): Promise<algosdk.AtomicTransactionComposer> => {
            return this.addMethodCall(algosdk.getMethodByName(this.methods, "returnTupleWithDyamicArray"), {}, txnParams, atc);
        },
        returnDynamicArrayFromTuple: async (txnParams?: bkr.TransactionOverrides, atc?: algosdk.AtomicTransactionComposer): Promise<algosdk.AtomicTransactionComposer> => {
            return this.addMethodCall(algosdk.getMethodByName(this.methods, "returnDynamicArrayFromTuple"), {}, txnParams, atc);
        },
        updateDynamicArrayInTuple: async (txnParams?: bkr.TransactionOverrides, atc?: algosdk.AtomicTransactionComposer): Promise<algosdk.AtomicTransactionComposer> => {
            return this.addMethodCall(algosdk.getMethodByName(this.methods, "updateDynamicArrayInTuple"), {}, txnParams, atc);
        },
        nonLiteralDynamicElementInTuple: async (txnParams?: bkr.TransactionOverrides, atc?: algosdk.AtomicTransactionComposer): Promise<algosdk.AtomicTransactionComposer> => {
            return this.addMethodCall(algosdk.getMethodByName(this.methods, "nonLiteralDynamicElementInTuple"), {}, txnParams, atc);
        },
        arrayPush: async (txnParams?: bkr.TransactionOverrides, atc?: algosdk.AtomicTransactionComposer): Promise<algosdk.AtomicTransactionComposer> => {
            return this.addMethodCall(algosdk.getMethodByName(this.methods, "arrayPush"), {}, txnParams, atc);
        },
        arrayPop: async (txnParams?: bkr.TransactionOverrides, atc?: algosdk.AtomicTransactionComposer): Promise<algosdk.AtomicTransactionComposer> => {
            return this.addMethodCall(algosdk.getMethodByName(this.methods, "arrayPop"), {}, txnParams, atc);
        },
        arrayPopValue: async (txnParams?: bkr.TransactionOverrides, atc?: algosdk.AtomicTransactionComposer): Promise<algosdk.AtomicTransactionComposer> => {
            return this.addMethodCall(algosdk.getMethodByName(this.methods, "arrayPopValue"), {}, txnParams, atc);
        },
        arraySplice: async (txnParams?: bkr.TransactionOverrides, atc?: algosdk.AtomicTransactionComposer): Promise<algosdk.AtomicTransactionComposer> => {
            return this.addMethodCall(algosdk.getMethodByName(this.methods, "arraySplice"), {}, txnParams, atc);
        },
        arraySpliceValue: async (txnParams?: bkr.TransactionOverrides, atc?: algosdk.AtomicTransactionComposer): Promise<algosdk.AtomicTransactionComposer> => {
            return this.addMethodCall(algosdk.getMethodByName(this.methods, "arraySpliceValue"), {}, txnParams, atc);
        },
        dynamicArrayElements: async (txnParams?: bkr.TransactionOverrides, atc?: algosdk.AtomicTransactionComposer): Promise<algosdk.AtomicTransactionComposer> => {
            return this.addMethodCall(algosdk.getMethodByName(this.methods, "dynamicArrayElements"), {}, txnParams, atc);
        },
        spliceLastElement: async (txnParams?: bkr.TransactionOverrides, atc?: algosdk.AtomicTransactionComposer): Promise<algosdk.AtomicTransactionComposer> => {
            return this.addMethodCall(algosdk.getMethodByName(this.methods, "spliceLastElement"), {}, txnParams, atc);
        },
        spliceLastElementValue: async (txnParams?: bkr.TransactionOverrides, atc?: algosdk.AtomicTransactionComposer): Promise<algosdk.AtomicTransactionComposer> => {
            return this.addMethodCall(algosdk.getMethodByName(this.methods, "spliceLastElementValue"), {}, txnParams, atc);
        },
        spliceFirstElement: async (txnParams?: bkr.TransactionOverrides, atc?: algosdk.AtomicTransactionComposer): Promise<algosdk.AtomicTransactionComposer> => {
            return this.addMethodCall(algosdk.getMethodByName(this.methods, "spliceFirstElement"), {}, txnParams, atc);
        },
        spliceFirstElementValue: async (txnParams?: bkr.TransactionOverrides, atc?: algosdk.AtomicTransactionComposer): Promise<algosdk.AtomicTransactionComposer> => {
            return this.addMethodCall(algosdk.getMethodByName(this.methods, "spliceFirstElementValue"), {}, txnParams, atc);
        },
        stringReturn: async (txnParams?: bkr.TransactionOverrides, atc?: algosdk.AtomicTransactionComposer): Promise<algosdk.AtomicTransactionComposer> => {
            return this.addMethodCall(algosdk.getMethodByName(this.methods, "stringReturn"), {}, txnParams, atc);
        },
        stringArg: async (args: {
            s: string;
        }, txnParams?: bkr.TransactionOverrides, atc?: algosdk.AtomicTransactionComposer): Promise<algosdk.AtomicTransactionComposer> => {
            return this.addMethodCall(algosdk.getMethodByName(this.methods, "stringArg"), { s: args.s }, txnParams, atc);
        },
        stringInTuple: async (txnParams?: bkr.TransactionOverrides, atc?: algosdk.AtomicTransactionComposer): Promise<algosdk.AtomicTransactionComposer> => {
            return this.addMethodCall(algosdk.getMethodByName(this.methods, "stringInTuple"), {}, txnParams, atc);
        },
        accesStringInTuple: async (txnParams?: bkr.TransactionOverrides, atc?: algosdk.AtomicTransactionComposer): Promise<algosdk.AtomicTransactionComposer> => {
            return this.addMethodCall(algosdk.getMethodByName(this.methods, "accesStringInTuple"), {}, txnParams, atc);
        },
        updateStringInTuple: async (txnParams?: bkr.TransactionOverrides, atc?: algosdk.AtomicTransactionComposer): Promise<algosdk.AtomicTransactionComposer> => {
            return this.addMethodCall(algosdk.getMethodByName(this.methods, "updateStringInTuple"), {}, txnParams, atc);
        },
        updateTupleWithOnlyDynamicTypes: async (txnParams?: bkr.TransactionOverrides, atc?: algosdk.AtomicTransactionComposer): Promise<algosdk.AtomicTransactionComposer> => {
            return this.addMethodCall(algosdk.getMethodByName(this.methods, "updateTupleWithOnlyDynamicTypes"), {}, txnParams, atc);
        },
        shortenDynamicElementInTuple: async (txnParams?: bkr.TransactionOverrides, atc?: algosdk.AtomicTransactionComposer): Promise<algosdk.AtomicTransactionComposer> => {
            return this.addMethodCall(algosdk.getMethodByName(this.methods, "shortenDynamicElementInTuple"), {}, txnParams, atc);
        },
        namedTuple: async (txnParams?: bkr.TransactionOverrides, atc?: algosdk.AtomicTransactionComposer): Promise<algosdk.AtomicTransactionComposer> => {
            return this.addMethodCall(algosdk.getMethodByName(this.methods, "namedTuple"), {}, txnParams, atc);
        },
        updateNamedTuple: async (txnParams?: bkr.TransactionOverrides, atc?: algosdk.AtomicTransactionComposer): Promise<algosdk.AtomicTransactionComposer> => {
            return this.addMethodCall(algosdk.getMethodByName(this.methods, "updateNamedTuple"), {}, txnParams, atc);
        },
        customTypes: async (txnParams?: bkr.TransactionOverrides, atc?: algosdk.AtomicTransactionComposer): Promise<algosdk.AtomicTransactionComposer> => {
            return this.addMethodCall(algosdk.getMethodByName(this.methods, "customTypes"), {}, txnParams, atc);
        },
        staticStringArrayArg: async (args: {
            a: string[];
        }, txnParams?: bkr.TransactionOverrides, atc?: algosdk.AtomicTransactionComposer): Promise<algosdk.AtomicTransactionComposer> => {
            return this.addMethodCall(algosdk.getMethodByName(this.methods, "staticStringArrayArg"), { a: args.a }, txnParams, atc);
        },
        dynamicAccessOfDynamicElementInStaticArray: async (args: {
            a: string[];
        }, txnParams?: bkr.TransactionOverrides, atc?: algosdk.AtomicTransactionComposer): Promise<algosdk.AtomicTransactionComposer> => {
            return this.addMethodCall(algosdk.getMethodByName(this.methods, "dynamicAccessOfDynamicElementInStaticArray"), { a: args.a }, txnParams, atc);
        }
    };
}
