{
  "hints": {
    "updateStringInTuple()(uint8,uint16[],string,uint16[],uint8[])": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "CREATE",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {},
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 0,
      "num_uints": 0
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDkKaW50IDE="
  },
  "contract": {
    "name": "ABITestUpdateStringInTuple",
    "desc": "",
    "methods": [
      {
        "name": "updateStringInTuple",
        "args": [],
        "desc": "",
        "returns": {
          "type": "(uint8,uint16[],string,uint16[],uint8[])",
          "desc": ""
        }
      }
    ]
  }
}