#pragma version 9

txn ApplicationID
int 0
>
int 6
*
txn OnCompletion
+
switch create_NoOp NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED call_NoOp

NOT_IMPLEMENTED:
	err

abi_route_u64plus:
	// no dupn needed
	txna ApplicationArgs 2
	btoi
	txna ApplicationArgs 1
	btoi
	callsub u64plus
	int 1
	return

u64plus:
	proto 2 0

	// tests/contracts/math.algo.ts:8
	// return a + b;
	frame_dig -1 // a: uint64
	frame_dig -2 // b: uint64
	+
	itob
	byte 0x151f7c75
	swap
	concat
	log
	retsub

abi_route_u64minus:
	// no dupn needed
	txna ApplicationArgs 2
	btoi
	txna ApplicationArgs 1
	btoi
	callsub u64minus
	int 1
	return

u64minus:
	proto 2 0

	// tests/contracts/math.algo.ts:12
	// return a - b;
	frame_dig -1 // a: uint64
	frame_dig -2 // b: uint64
	-
	itob
	byte 0x151f7c75
	swap
	concat
	log
	retsub

abi_route_u64mul:
	// no dupn needed
	txna ApplicationArgs 2
	btoi
	txna ApplicationArgs 1
	btoi
	callsub u64mul
	int 1
	return

u64mul:
	proto 2 0

	// tests/contracts/math.algo.ts:16
	// return a * b;
	frame_dig -1 // a: uint64
	frame_dig -2 // b: uint64
	*
	itob
	byte 0x151f7c75
	swap
	concat
	log
	retsub

abi_route_u64div:
	// no dupn needed
	txna ApplicationArgs 2
	btoi
	txna ApplicationArgs 1
	btoi
	callsub u64div
	int 1
	return

u64div:
	proto 2 0

	// tests/contracts/math.algo.ts:20
	// return a / b;
	frame_dig -1 // a: uint64
	frame_dig -2 // b: uint64
	/
	itob
	byte 0x151f7c75
	swap
	concat
	log
	retsub

abi_route_u256plus:
	// no dupn needed
	txna ApplicationArgs 2
	txna ApplicationArgs 1
	callsub u256plus
	int 1
	return

u256plus:
	proto 2 0

	// tests/contracts/math.algo.ts:24
	// return a + b;
	frame_dig -1 // a: uint256
	frame_dig -2 // b: uint256
	b+
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dupn 2
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b<=
	assert
	len
	int 32
	-
	int 32
	extract3
	byte 0x151f7c75
	swap
	concat
	log
	retsub

abi_route_u256minus:
	// no dupn needed
	txna ApplicationArgs 2
	txna ApplicationArgs 1
	callsub u256minus
	int 1
	return

u256minus:
	proto 2 0

	// tests/contracts/math.algo.ts:28
	// return a - b;
	frame_dig -1 // a: uint256
	frame_dig -2 // b: uint256
	b-
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dupn 2
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b<=
	assert
	len
	int 32
	-
	int 32
	extract3
	byte 0x151f7c75
	swap
	concat
	log
	retsub

abi_route_u256mul:
	// no dupn needed
	txna ApplicationArgs 2
	txna ApplicationArgs 1
	callsub u256mul
	int 1
	return

u256mul:
	proto 2 0

	// tests/contracts/math.algo.ts:32
	// return a * b;
	frame_dig -1 // a: uint256
	frame_dig -2 // b: uint256
	b*
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dupn 2
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b<=
	assert
	len
	int 32
	-
	int 32
	extract3
	byte 0x151f7c75
	swap
	concat
	log
	retsub

abi_route_u256div:
	// no dupn needed
	txna ApplicationArgs 2
	txna ApplicationArgs 1
	callsub u256div
	int 1
	return

u256div:
	proto 2 0

	// tests/contracts/math.algo.ts:36
	// return a / b;
	frame_dig -1 // a: uint256
	frame_dig -2 // b: uint256
	b/
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dupn 2
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b<=
	assert
	len
	int 32
	-
	int 32
	extract3
	byte 0x151f7c75
	swap
	concat
	log
	retsub

abi_route_u64Return256:
	// no dupn needed
	txna ApplicationArgs 2
	btoi
	txna ApplicationArgs 1
	btoi
	callsub u64Return256
	int 1
	return

u64Return256:
	proto 2 0

	// tests/contracts/math.algo.ts:40
	// return a + b;
	frame_dig -1 // a: uint64
	frame_dig -2 // b: uint64
	+
	itob
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dupn 2
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b<=
	assert
	len
	int 32
	-
	int 32
	extract3
	byte 0x151f7c75
	swap
	concat
	log
	retsub

abi_route_maxU64:
	// no dupn needed
	callsub maxU64
	int 1
	return

maxU64:
	proto 0 0

	// tests/contracts/math.algo.ts:45
	// assert(18_446_744_073_709_551_615)
	int 18_446_744_073_709_551_615
	assert
	retsub

abi_route_btobigintFirst:
	// no dupn needed
	txna ApplicationArgs 1
	extract 2 0
	callsub btobigintFirst
	int 1
	return

btobigintFirst:
	proto 1 0

	// tests/contracts/math.algo.ts:49
	// return btobigint(input) / 1;
	frame_dig -1 // input: bytes
	int 1
	itob
	b/
	btoi
	itob
	byte 0x151f7c75
	swap
	concat
	log
	retsub

abi_route_btobigintSecond:
	// no dupn needed
	txna ApplicationArgs 1
	extract 2 0
	callsub btobigintSecond
	int 1
	return

btobigintSecond:
	proto 1 0

	// tests/contracts/math.algo.ts:53
	// return 1 / btobigint(input);
	int 1
	frame_dig -1 // input: bytes
	swap
	itob
	swap
	b/
	btoi
	itob
	byte 0x151f7c75
	swap
	concat
	log
	retsub

abi_route_exponent:
	// no dupn needed
	callsub exponent
	int 1
	return

exponent:
	proto 0 0

	// tests/contracts/math.algo.ts:57
	// return 2 ** 4;
	int 2
	int 4
	exp
	itob
	byte 0x151f7c75
	swap
	concat
	log
	retsub

abi_route_defaultTEALScriptCreate:
	int 1
	return

create_NoOp:
	txn NumAppArgs
	bz abi_route_defaultTEALScriptCreate
	err

call_NoOp:
	method "u64plus(uint64,uint64)uint64"
	method "u64minus(uint64,uint64)uint64"
	method "u64mul(uint64,uint64)uint64"
	method "u64div(uint64,uint64)uint64"
	method "u256plus(uint256,uint256)uint256"
	method "u256minus(uint256,uint256)uint256"
	method "u256mul(uint256,uint256)uint256"
	method "u256div(uint256,uint256)uint256"
	method "u64Return256(uint64,uint64)uint256"
	method "maxU64()void"
	method "btobigintFirst(string)uint64"
	method "btobigintSecond(string)uint64"
	method "exponent()uint64"
	txna ApplicationArgs 0
	match abi_route_u64plus abi_route_u64minus abi_route_u64mul abi_route_u64div abi_route_u256plus abi_route_u256minus abi_route_u256mul abi_route_u256div abi_route_u64Return256 abi_route_maxU64 abi_route_btobigintFirst abi_route_btobigintSecond abi_route_exponent
	err