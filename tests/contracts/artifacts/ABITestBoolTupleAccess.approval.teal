#pragma version 8
	b main

abi_route_boolTupleAccess:
	txn OnCompletion
	int NoOp
	==
	txn ApplicationID
	int 0
	!=
	&&
	assert
	byte 0x
	callsub boolTupleAccess
	int 1
	return

boolTupleAccess:
	proto 1 0

	// tests/contracts/abi.algo.ts:864
	// a: [
	byte 0x // initial head
	byte 0x // initial tail
	byte 0x0002 // initial head offset
	byte 0x0000
	int 0
	int 0
	setbit
	int 1
	int 0
	setbit
	int 2
	int 0
	setbit
	int 3
	int 0
	setbit
	int 4
	int 0
	setbit
	int 5
	int 0
	setbit
	int 6
	int 0
	setbit
	int 7
	int 0
	setbit
	int 8
	int 1
	setbit
	callsub process_static_tuple_element
	pop // pop head offset
	concat // concat head and tail
	frame_bury -1 // a: [bool,bool,bool,bool,bool,bool,bool,bool,bool]

	// tests/contracts/abi.algo.ts:870
	// return a[8];
	frame_dig -1 // a: [bool,bool,bool,bool,bool,bool,bool,bool,bool]
	store 0 // full array
	int 0 // initial offset
	int 0 // headOffset
	+
	int 8
	*
	int 8
	+
	load 0 // full array
	swap
	getbit
	byte 0x00
	int 0
	uncover 2
	setbit
	byte 0x151f7c75
	swap
	concat
	log
	retsub

main:
	txn NumAppArgs
	bnz route_abi

	// default createApplication
	txn ApplicationID
	int 0
	==
	txn OnCompletion
	int NoOp
	==
	&&
	return

route_abi:
	method "boolTupleAccess()bool"
	txna ApplicationArgs 0
	match abi_route_boolTupleAccess
	err

process_static_tuple_element:
	proto 4 3
	frame_dig -4 // tuple head
	frame_dig -1 // element
	concat
	frame_dig -3 // tuple tail
	frame_dig -2 // head offset
	retsub