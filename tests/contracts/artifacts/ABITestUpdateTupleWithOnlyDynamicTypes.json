{
  "hints": {
    "updateTupleWithOnlyDynamicTypes()(uint16[],uint16[],uint16[])": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "create()void": {
      "call_config": {
        "no_op": "CREATE"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {},
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 0,
      "num_uints": 0
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDgKaW50IDEKcmV0dXJu"
  },
  "contract": {
    "name": "ABITestUpdateTupleWithOnlyDynamicTypes",
    "desc": "",
    "methods": [
      {
        "name": "updateTupleWithOnlyDynamicTypes",
        "args": [],
        "desc": "",
        "returns": {
          "type": "(uint16[],uint16[],uint16[])",
          "desc": ""
        }
      },
      {
        "name": "create",
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        },
        "args": []
      }
    ]
  }
}