import algosdk from "algosdk";
import * as bkr from "beaker-ts";
export class ContactsApp extends bkr.ApplicationClient {
    desc: string = "";
    override appSchema: bkr.Schema = { declared: { myContact: { type: bkr.AVMType.bytes, key: "myContact", desc: "", static: false } }, reserved: {} };
    override acctSchema: bkr.Schema = { declared: {}, reserved: {} };
    override approvalProgram: string = "";
    override clearProgram: string = "I3ByYWdtYSB2ZXJzaW9uIDgKaW50IDEKcmV0dXJu";
    override methods: algosdk.ABIMethod[] = [
        new algosdk.ABIMethod({ name: "setMyContact", desc: "", args: [{ type: "string", name: "name", desc: "" }, { type: "string", name: "company", desc: "" }], returns: { type: "void", desc: "" } }),
        new algosdk.ABIMethod({ name: "addContact", desc: "", args: [{ type: "string", name: "name", desc: "" }, { type: "string", name: "company", desc: "" }, { type: "account", name: "address", desc: "" }], returns: { type: "void", desc: "" } }),
        new algosdk.ABIMethod({ name: "updateContactField", desc: "", args: [{ type: "string", name: "field", desc: "" }, { type: "string", name: "value", desc: "" }, { type: "account", name: "address", desc: "" }], returns: { type: "void", desc: "" } }),
        new algosdk.ABIMethod({ name: "verifyContactName", desc: "", args: [{ type: "string", name: "name", desc: "" }, { type: "account", name: "address", desc: "" }], returns: { type: "void", desc: "" } })
    ];
    async setMyContact(args: {
        name: string;
        company: string;
    }, txnParams?: bkr.TransactionOverrides): Promise<bkr.ABIResult<void>> {
        const result = await this.execute(await this.compose.setMyContact({ name: args.name, company: args.company }, txnParams));
        return new bkr.ABIResult<void>(result);
    }
    async addContact(args: {
        name: string;
        company: string;
        address: string;
    }, txnParams?: bkr.TransactionOverrides): Promise<bkr.ABIResult<void>> {
        const result = await this.execute(await this.compose.addContact({ name: args.name, company: args.company, address: args.address }, txnParams));
        return new bkr.ABIResult<void>(result);
    }
    async updateContactField(args: {
        field: string;
        value: string;
        address: string;
    }, txnParams?: bkr.TransactionOverrides): Promise<bkr.ABIResult<void>> {
        const result = await this.execute(await this.compose.updateContactField({ field: args.field, value: args.value, address: args.address }, txnParams));
        return new bkr.ABIResult<void>(result);
    }
    async verifyContactName(args: {
        name: string;
        address: string;
    }, txnParams?: bkr.TransactionOverrides): Promise<bkr.ABIResult<void>> {
        const result = await this.execute(await this.compose.verifyContactName({ name: args.name, address: args.address }, txnParams));
        return new bkr.ABIResult<void>(result);
    }
    compose = {
        setMyContact: async (args: {
            name: string;
            company: string;
        }, txnParams?: bkr.TransactionOverrides, atc?: algosdk.AtomicTransactionComposer): Promise<algosdk.AtomicTransactionComposer> => {
            return this.addMethodCall(algosdk.getMethodByName(this.methods, "setMyContact"), { name: args.name, company: args.company }, txnParams, atc);
        },
        addContact: async (args: {
            name: string;
            company: string;
            address: string;
        }, txnParams?: bkr.TransactionOverrides, atc?: algosdk.AtomicTransactionComposer): Promise<algosdk.AtomicTransactionComposer> => {
            return this.addMethodCall(algosdk.getMethodByName(this.methods, "addContact"), { name: args.name, company: args.company, address: args.address }, txnParams, atc);
        },
        updateContactField: async (args: {
            field: string;
            value: string;
            address: string;
        }, txnParams?: bkr.TransactionOverrides, atc?: algosdk.AtomicTransactionComposer): Promise<algosdk.AtomicTransactionComposer> => {
            return this.addMethodCall(algosdk.getMethodByName(this.methods, "updateContactField"), { field: args.field, value: args.value, address: args.address }, txnParams, atc);
        },
        verifyContactName: async (args: {
            name: string;
            address: string;
        }, txnParams?: bkr.TransactionOverrides, atc?: algosdk.AtomicTransactionComposer): Promise<algosdk.AtomicTransactionComposer> => {
            return this.addMethodCall(algosdk.getMethodByName(this.methods, "verifyContactName"), { name: args.name, address: args.address }, txnParams, atc);
        }
    };
}
