import algosdk from "algosdk";
import * as bkr from "beaker-ts";
export class ARC75 extends bkr.ApplicationClient {
    desc: string = "";
    override appSchema: bkr.Schema = { declared: {}, reserved: {} };
    override acctSchema: bkr.Schema = { declared: {}, reserved: {} };
    override approvalProgram: string = "";
    override clearProgram: string = "I3ByYWdtYSB2ZXJzaW9uIDgKaW50IDEKcmV0dXJu";
    override methods: algosdk.ABIMethod[] = [
        new algosdk.ABIMethod({ name: "addCollectionToWhiteList", desc: "", args: [{ type: "string", name: "arc", desc: "" }, { type: "uint16", name: "id", desc: "" }, { type: "uint64", name: "collection", desc: "" }, { type: "pay", name: "payment", desc: "" }], returns: { type: "void", desc: "" } }),
        new algosdk.ABIMethod({ name: "setCollectionWhitelist", desc: "", args: [{ type: "string", name: "arc", desc: "" }, { type: "uint16", name: "id", desc: "" }, { type: "uint64[]", name: "collections", desc: "" }], returns: { type: "void", desc: "" } }),
        new algosdk.ABIMethod({ name: "deleteWhitelist", desc: "", args: [{ type: "string", name: "arc", desc: "" }, { type: "uint16", name: "id", desc: "" }], returns: { type: "void", desc: "" } }),
        new algosdk.ABIMethod({ name: "deleteCollectionFromWhitelist", desc: "", args: [{ type: "string", name: "arc", desc: "" }, { type: "uint16", name: "id", desc: "" }, { type: "uint64", name: "collection", desc: "" }, { type: "uint64", name: "index", desc: "" }], returns: { type: "void", desc: "" } })
    ];
    async addCollectionToWhiteList(args: {
        arc: string;
        id: bigint;
        collection: bigint;
        payment: algosdk.TransactionWithSigner | algosdk.Transaction;
    }, txnParams?: bkr.TransactionOverrides): Promise<bkr.ABIResult<void>> {
        const result = await this.execute(await this.compose.addCollectionToWhiteList({ arc: args.arc, id: args.id, collection: args.collection, payment: args.payment }, txnParams));
        return new bkr.ABIResult<void>(result);
    }
    async setCollectionWhitelist(args: {
        arc: string;
        id: bigint;
        collections: bigint[];
    }, txnParams?: bkr.TransactionOverrides): Promise<bkr.ABIResult<void>> {
        const result = await this.execute(await this.compose.setCollectionWhitelist({ arc: args.arc, id: args.id, collections: args.collections }, txnParams));
        return new bkr.ABIResult<void>(result);
    }
    async deleteWhitelist(args: {
        arc: string;
        id: bigint;
    }, txnParams?: bkr.TransactionOverrides): Promise<bkr.ABIResult<void>> {
        const result = await this.execute(await this.compose.deleteWhitelist({ arc: args.arc, id: args.id }, txnParams));
        return new bkr.ABIResult<void>(result);
    }
    async deleteCollectionFromWhitelist(args: {
        arc: string;
        id: bigint;
        collection: bigint;
        index: bigint;
    }, txnParams?: bkr.TransactionOverrides): Promise<bkr.ABIResult<void>> {
        const result = await this.execute(await this.compose.deleteCollectionFromWhitelist({ arc: args.arc, id: args.id, collection: args.collection, index: args.index }, txnParams));
        return new bkr.ABIResult<void>(result);
    }
    compose = {
        addCollectionToWhiteList: async (args: {
            arc: string;
            id: bigint;
            collection: bigint;
            payment: algosdk.TransactionWithSigner | algosdk.Transaction;
        }, txnParams?: bkr.TransactionOverrides, atc?: algosdk.AtomicTransactionComposer): Promise<algosdk.AtomicTransactionComposer> => {
            return this.addMethodCall(algosdk.getMethodByName(this.methods, "addCollectionToWhiteList"), { arc: args.arc, id: args.id, collection: args.collection, payment: args.payment }, txnParams, atc);
        },
        setCollectionWhitelist: async (args: {
            arc: string;
            id: bigint;
            collections: bigint[];
        }, txnParams?: bkr.TransactionOverrides, atc?: algosdk.AtomicTransactionComposer): Promise<algosdk.AtomicTransactionComposer> => {
            return this.addMethodCall(algosdk.getMethodByName(this.methods, "setCollectionWhitelist"), { arc: args.arc, id: args.id, collections: args.collections }, txnParams, atc);
        },
        deleteWhitelist: async (args: {
            arc: string;
            id: bigint;
        }, txnParams?: bkr.TransactionOverrides, atc?: algosdk.AtomicTransactionComposer): Promise<algosdk.AtomicTransactionComposer> => {
            return this.addMethodCall(algosdk.getMethodByName(this.methods, "deleteWhitelist"), { arc: args.arc, id: args.id }, txnParams, atc);
        },
        deleteCollectionFromWhitelist: async (args: {
            arc: string;
            id: bigint;
            collection: bigint;
            index: bigint;
        }, txnParams?: bkr.TransactionOverrides, atc?: algosdk.AtomicTransactionComposer): Promise<algosdk.AtomicTransactionComposer> => {
            return this.addMethodCall(algosdk.getMethodByName(this.methods, "deleteCollectionFromWhitelist"), { arc: args.arc, id: args.id, collection: args.collection, index: args.index }, txnParams, atc);
        }
    };
}
