import algosdk from "algosdk";
import * as bkr from "beaker-ts";
export class ARC75 extends bkr.ApplicationClient {
    desc: string = "";
    override appSchema: bkr.Schema = { declared: {}, reserved: {} };
    override acctSchema: bkr.Schema = { declared: {}, reserved: {} };
    override approvalProgram: string = "";
    override clearProgram: string = "I3ByYWdtYSB2ZXJzaW9uIDgKaW50IDEKcmV0dXJu";
    override methods: algosdk.ABIMethod[] = [
        new algosdk.ABIMethod({ name: "addCollectionToWhiteList", desc: "", args: [{ type: "uint16", name: "id", desc: "" }, { type: "uint64", name: "collection", desc: "" }, { type: "pay", name: "payment", desc: "" }], returns: { type: "void", desc: "" } }),
        new algosdk.ABIMethod({ name: "setCollectionWhitelist", desc: "", args: [{ type: "uint16", name: "id", desc: "" }, { type: "uint64[]", name: "collections", desc: "" }], returns: { type: "void", desc: "" } }),
        new algosdk.ABIMethod({ name: "deleteWhitelist", desc: "", args: [{ type: "uint16", name: "id", desc: "" }], returns: { type: "void", desc: "" } }),
        new algosdk.ABIMethod({ name: "deleteCollectionFromWhitelist", desc: "", args: [{ type: "uint16", name: "id", desc: "" }, { type: "uint64", name: "collection", desc: "" }, { type: "uint64", name: "index", desc: "" }], returns: { type: "void", desc: "" } })
    ];
    async addCollectionToWhiteList(args: {
        id: bigint;
        collection: bigint;
        payment: algosdk.TransactionWithSigner | algosdk.Transaction;
    }, txnParams?: bkr.TransactionOverrides): Promise<bkr.ABIResult<void>> {
        const result = await this.execute(await this.compose.addCollectionToWhiteList({ id: args.id, collection: args.collection, payment: args.payment }, txnParams));
        return new bkr.ABIResult<void>(result);
    }
    async setCollectionWhitelist(args: {
        id: bigint;
        collections: bigint[];
    }, txnParams?: bkr.TransactionOverrides): Promise<bkr.ABIResult<void>> {
        const result = await this.execute(await this.compose.setCollectionWhitelist({ id: args.id, collections: args.collections }, txnParams));
        return new bkr.ABIResult<void>(result);
    }
    async deleteWhitelist(args: {
        id: bigint;
    }, txnParams?: bkr.TransactionOverrides): Promise<bkr.ABIResult<void>> {
        const result = await this.execute(await this.compose.deleteWhitelist({ id: args.id }, txnParams));
        return new bkr.ABIResult<void>(result);
    }
    async deleteCollectionFromWhitelist(args: {
        id: bigint;
        collection: bigint;
        index: bigint;
    }, txnParams?: bkr.TransactionOverrides): Promise<bkr.ABIResult<void>> {
        const result = await this.execute(await this.compose.deleteCollectionFromWhitelist({ id: args.id, collection: args.collection, index: args.index }, txnParams));
        return new bkr.ABIResult<void>(result);
    }
    compose = {
        addCollectionToWhiteList: async (args: {
            id: bigint;
            collection: bigint;
            payment: algosdk.TransactionWithSigner | algosdk.Transaction;
        }, txnParams?: bkr.TransactionOverrides, atc?: algosdk.AtomicTransactionComposer): Promise<algosdk.AtomicTransactionComposer> => {
            return this.addMethodCall(algosdk.getMethodByName(this.methods, "addCollectionToWhiteList"), { id: args.id, collection: args.collection, payment: args.payment }, txnParams, atc);
        },
        setCollectionWhitelist: async (args: {
            id: bigint;
            collections: bigint[];
        }, txnParams?: bkr.TransactionOverrides, atc?: algosdk.AtomicTransactionComposer): Promise<algosdk.AtomicTransactionComposer> => {
            return this.addMethodCall(algosdk.getMethodByName(this.methods, "setCollectionWhitelist"), { id: args.id, collections: args.collections }, txnParams, atc);
        },
        deleteWhitelist: async (args: {
            id: bigint;
        }, txnParams?: bkr.TransactionOverrides, atc?: algosdk.AtomicTransactionComposer): Promise<algosdk.AtomicTransactionComposer> => {
            return this.addMethodCall(algosdk.getMethodByName(this.methods, "deleteWhitelist"), { id: args.id }, txnParams, atc);
        },
        deleteCollectionFromWhitelist: async (args: {
            id: bigint;
            collection: bigint;
            index: bigint;
        }, txnParams?: bkr.TransactionOverrides, atc?: algosdk.AtomicTransactionComposer): Promise<algosdk.AtomicTransactionComposer> => {
            return this.addMethodCall(algosdk.getMethodByName(this.methods, "deleteCollectionFromWhitelist"), { id: args.id, collection: args.collection, index: args.index }, txnParams, atc);
        }
    };
}
