/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import {
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  CoreAppCallArgs,
  RawAppCallArgs,
  AppState,
  TealTemplateParams,
  ABIAppCallArg,
} from '@algorandfoundation/algokit-utils/types/app'
import {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import { SendTransactionResult, TransactionToSign, SendTransactionFrom } from '@algorandfoundation/algokit-utils/types/transaction'
import { Algodv2, OnApplicationComplete, Transaction, TransactionWithSigner, AtomicTransactionComposer } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "addAppToWhiteList(string,uint16,uint64,pay)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "setAppWhitelist(string,uint16,uint64[])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "deleteWhitelist(string,uint16)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "deleteAppFromWhitelist(string,uint16,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "CREATE"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {},
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 0,
      "num_uints": 0
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDgKaW50IDEKcmV0dXJu"
  },
  "contract": {
    "name": "ARC75",
    "desc": "",
    "methods": [
      {
        "name": "addAppToWhiteList",
        "args": [
          {
            "name": "arc",
            "type": "string",
            "desc": ""
          },
          {
            "name": "boxIndex",
            "type": "uint16",
            "desc": ""
          },
          {
            "name": "appID",
            "type": "uint64",
            "desc": ""
          },
          {
            "name": "payment",
            "type": "pay",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "setAppWhitelist",
        "args": [
          {
            "name": "arc",
            "type": "string",
            "desc": ""
          },
          {
            "name": "boxIndex",
            "type": "uint16",
            "desc": ""
          },
          {
            "name": "appIDs",
            "type": "uint64[]",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "deleteWhitelist",
        "args": [
          {
            "name": "arc",
            "type": "string",
            "desc": ""
          },
          {
            "name": "boxIndex",
            "type": "uint16",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "deleteAppFromWhitelist",
        "args": [
          {
            "name": "arc",
            "type": "string",
            "desc": ""
          },
          {
            "name": "boxIndex",
            "type": "uint16",
            "desc": ""
          },
          {
            "name": "appID",
            "type": "uint64",
            "desc": ""
          },
          {
            "name": "index",
            "type": "uint64",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      }
    ]
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt 
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

/**
 * Defines the types of available calls and state of the Arc75 smart contract.
 */
export type Arc75 = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'addAppToWhiteList(string,uint16,uint64,pay)void' | 'addAppToWhiteList', {
      argsObj: {
        arc: string
        boxIndex: number
        appID: bigint | number
        payment: TransactionToSign | Transaction | Promise<SendTransactionResult>
      }
      argsTuple: [arc: string, boxIndex: number, appID: bigint | number, payment: TransactionToSign | Transaction | Promise<SendTransactionResult>]
      returns: void
    }>
    & Record<'setAppWhitelist(string,uint16,uint64[])void' | 'setAppWhitelist', {
      argsObj: {
        arc: string
        boxIndex: number
        appIDs: bigint | number[]
      }
      argsTuple: [arc: string, boxIndex: number, appIDs: bigint | number[]]
      returns: void
    }>
    & Record<'deleteWhitelist(string,uint16)void' | 'deleteWhitelist', {
      argsObj: {
        arc: string
        boxIndex: number
      }
      argsTuple: [arc: string, boxIndex: number]
      returns: void
    }>
    & Record<'deleteAppFromWhitelist(string,uint16,uint64,uint64)void' | 'deleteAppFromWhitelist', {
      argsObj: {
        arc: string
        boxIndex: number
        appID: bigint | number
        index: bigint | number
      }
      argsTuple: [arc: string, boxIndex: number, appID: bigint | number, index: bigint | number]
      returns: void
    }>
}
/**
 * Defines the possible abi call signatures
 */
export type Arc75Sig = keyof Arc75['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends Arc75Sig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the Arc75 smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends Arc75Sig> = Arc75['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Arc75 smart contract to the method's return type
 */
export type MethodReturn<TSignature extends Arc75Sig> = Arc75['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type Arc75CreateCalls = (typeof Arc75CallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type Arc75CreateCallParams =
  | (TypedCallParams<undefined> & (OnCompleteNoOp))
/**
 * Defines arguments required for the deploy method.
 */
export type Arc75DeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: Arc75CreateCalls) => Arc75CreateCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class Arc75CallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the ARC75 smart contract using a bare call
       *
       * @param params Any parameters for the call
       * @returns A TypedCallParams object for the call
       */
      bare(params: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: undefined,
          methodArgs: undefined,
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the addAppToWhiteList(string,uint16,uint64,pay)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static addAppToWhiteList(args: MethodArgs<'addAppToWhiteList(string,uint16,uint64,pay)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'addAppToWhiteList(string,uint16,uint64,pay)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.arc, args.boxIndex, args.appID, args.payment],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the setAppWhitelist(string,uint16,uint64[])void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setAppWhitelist(args: MethodArgs<'setAppWhitelist(string,uint16,uint64[])void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'setAppWhitelist(string,uint16,uint64[])void' as const,
      methodArgs: Array.isArray(args) ? args : [args.arc, args.boxIndex, args.appIDs],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the deleteWhitelist(string,uint16)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static deleteWhitelist(args: MethodArgs<'deleteWhitelist(string,uint16)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'deleteWhitelist(string,uint16)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.arc, args.boxIndex],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the deleteAppFromWhitelist(string,uint16,uint64,uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static deleteAppFromWhitelist(args: MethodArgs<'deleteAppFromWhitelist(string,uint16,uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'deleteAppFromWhitelist(string,uint16,uint64,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.arc, args.boxIndex, args.appID, args.index],
      ...params,
    }
  }
}

/**
 * A client to make calls to the ARC75 smart contract
 */
export class Arc75Client {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `Arc75Client`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue }
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof Arc75['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the ARC75 smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: Arc75DeployArgs & AppClientDeployCoreParams = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(Arc75CallFactory.create)
    return this.appClient.deploy({
      ...params,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the ARC75 smart contract using a bare call.
       *
       * @param args The arguments for the bare call
       * @returns The create result
       */
      bare(args: BareCallArgs & AppClientCallCoreParams & AppClientCompilationParams & CoreAppCallArgs & (OnCompleteNoOp) = {}): Promise<AppCallTransactionResultOfType<undefined>> {
        return $this.appClient.create(args) as unknown as Promise<AppCallTransactionResultOfType<undefined>>
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the ARC75 smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the addAppToWhiteList(string,uint16,uint64,pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public addAppToWhiteList(args: MethodArgs<'addAppToWhiteList(string,uint16,uint64,pay)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(Arc75CallFactory.addAppToWhiteList(args, params))
  }

  /**
   * Calls the setAppWhitelist(string,uint16,uint64[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setAppWhitelist(args: MethodArgs<'setAppWhitelist(string,uint16,uint64[])void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(Arc75CallFactory.setAppWhitelist(args, params))
  }

  /**
   * Calls the deleteWhitelist(string,uint16)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public deleteWhitelist(args: MethodArgs<'deleteWhitelist(string,uint16)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(Arc75CallFactory.deleteWhitelist(args, params))
  }

  /**
   * Calls the deleteAppFromWhitelist(string,uint16,uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public deleteAppFromWhitelist(args: MethodArgs<'deleteAppFromWhitelist(string,uint16,uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(Arc75CallFactory.deleteAppFromWhitelist(args, params))
  }

  public compose(): Arc75Composer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      addAppToWhiteList(args: MethodArgs<'addAppToWhiteList(string,uint16,uint64,pay)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.addAppToWhiteList(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      setAppWhitelist(args: MethodArgs<'setAppWhitelist(string,uint16,uint64[])void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setAppWhitelist(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      deleteWhitelist(args: MethodArgs<'deleteWhitelist(string,uint16)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.deleteWhitelist(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      deleteAppFromWhitelist(args: MethodArgs<'deleteAppFromWhitelist(string,uint16,uint64,uint64)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.deleteAppFromWhitelist(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async execute() {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams: {} }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as Arc75Composer
  }
}
export type Arc75Composer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the addAppToWhiteList(string,uint16,uint64,pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  addAppToWhiteList(args: MethodArgs<'addAppToWhiteList(string,uint16,uint64,pay)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): Arc75Composer<[...TReturns, MethodReturn<'addAppToWhiteList(string,uint16,uint64,pay)void'>]>

  /**
   * Calls the setAppWhitelist(string,uint16,uint64[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setAppWhitelist(args: MethodArgs<'setAppWhitelist(string,uint16,uint64[])void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): Arc75Composer<[...TReturns, MethodReturn<'setAppWhitelist(string,uint16,uint64[])void'>]>

  /**
   * Calls the deleteWhitelist(string,uint16)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  deleteWhitelist(args: MethodArgs<'deleteWhitelist(string,uint16)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): Arc75Composer<[...TReturns, MethodReturn<'deleteWhitelist(string,uint16)void'>]>

  /**
   * Calls the deleteAppFromWhitelist(string,uint16,uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  deleteAppFromWhitelist(args: MethodArgs<'deleteAppFromWhitelist(string,uint16,uint64,uint64)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): Arc75Composer<[...TReturns, MethodReturn<'deleteAppFromWhitelist(string,uint16,uint64,uint64)void'>]>

  /**
   * Makes a clear_state call to an existing instance of the ARC75 smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs): Arc75Composer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): Arc75Composer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Executes the transaction group and returns an array of results
   */
  execute(): Promise<Arc75ComposerResults<TReturns>>
}
export type Arc75ComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
