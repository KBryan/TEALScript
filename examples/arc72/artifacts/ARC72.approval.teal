#pragma version 8
	b main

abi_route_arc72_ownerOf:
	txn OnCompletion
	int NoOp
	==
	txn ApplicationID
	int 0
	!=
	&&
	assert

	// no dupn needed
	txna ApplicationArgs 1
	callsub arc72_ownerOf
	int 1
	return

arc72_ownerOf:
	proto 1 0

	// examples/arc72/arc72.algo.ts:24
	// return this.tokenBox.get(tokenId).owner;
	frame_dig -1 // tokenId: uint256
	box_get
	assert
	frame_dig -1 // tokenId: uint256
	box_get
	assert
	store 0 // full array
	int 0 // initial offset
	int 0 // headOffset
	+
	load 0 // full array
	swap
	int 32
	extract3
	byte 0x151f7c75
	swap
	concat
	log
	retsub

abi_route_arc72_tokenURI:
	txn OnCompletion
	int NoOp
	==
	txn ApplicationID
	int 0
	!=
	&&
	assert

	// no dupn needed
	txna ApplicationArgs 1
	callsub arc72_tokenURI
	int 1
	return

arc72_tokenURI:
	proto 1 0

	// examples/arc72/arc72.algo.ts:35
	// return this.tokenBox.get(tokenId).uri;
	frame_dig -1 // tokenId: uint256
	box_get
	assert
	frame_dig -1 // tokenId: uint256
	box_get
	assert
	store 0 // full array
	int 0 // initial offset
	int 32 // headOffset
	+
	load 0 // full array
	swap
	int 256
	extract3
	byte 0x151f7c75
	swap
	concat
	log
	retsub

transferTo:
	proto 2 0

	// examples/arc72/arc72.algo.ts:39
	// this.tokenBox.get(tokenId).owner = to
	frame_dig -2 // tokenId: uint256
	box_get
	assert
	store 0 // full array
	int 0 // initial offset
	int 0 // headOffset
	+
	load 0 // full array
	swap
	frame_dig -1 // to: address
	replace3
	frame_dig -2 // tokenId: uint256
	swap
	box_put
	retsub

abi_route_arc72_transferFrom:
	txn OnCompletion
	int NoOp
	==
	txn ApplicationID
	int 0
	!=
	&&
	assert
	byte 0x; dup
	txna ApplicationArgs 3
	txna ApplicationArgs 2
	txna ApplicationArgs 1
	callsub arc72_transferFrom
	int 1
	return

arc72_transferFrom:
	proto 5 0

	// examples/arc72/arc72.algo.ts:46
	// token = this.tokenBox.get(tokenId)
	frame_dig -3 // tokenId: uint256
	frame_bury -4 // storage key//token

	// examples/arc72/arc72.algo.ts:48
	// key: Control = { owner: this.txn.sender, controller: _from }
	txn Sender
	frame_dig -1 // _from: address
	concat
	frame_bury -5 // key: Control

	// if0_condition
	// examples/arc72/arc72.algo.ts:51
	// this.txn.sender === _from
	txn Sender
	frame_dig -1 // _from: address
	==
	dup
	bnz skip_or0
	txn Sender
	frame_dig -4 // storage key//token
	box_get
	assert
	store 0 // full array
	int 0 // initial offset
	int 288 // headOffset
	+
	load 0 // full array
	swap
	int 32
	extract3
	==
	||

skip_or0:
	dup
	bnz skip_or1
	frame_dig -5 // key: Control
	box_len
	swap
	pop
	||

skip_or1:
	bz if0_else

	// if0_consequent
	// examples/arc72/arc72.algo.ts:55
	// this.transferTo(to, tokenId)
	// no dupn needed
	frame_dig -3 // tokenId: uint256
	frame_dig -2 // to: address
	callsub transferTo
	b if0_end

if0_else:
	err // 'Transfer not authorized'

if0_end:
	retsub

abi_route_arc72_approve:
	txn OnCompletion
	int NoOp
	==
	txn ApplicationID
	int 0
	!=
	&&
	assert

	// no dupn needed
	txna ApplicationArgs 2
	txna ApplicationArgs 1
	callsub arc72_approve
	int 1
	return

arc72_approve:
	proto 2 0

	// examples/arc72/arc72.algo.ts:67
	// this.tokenBox.get(tokenId).controller = approved
	frame_dig -2 // tokenId: uint256
	box_get
	assert
	store 0 // full array
	int 0 // initial offset
	int 288 // headOffset
	+
	load 0 // full array
	swap
	frame_dig -1 // approved: address
	replace3
	frame_dig -2 // tokenId: uint256
	swap
	box_put
	retsub

abi_route_arc72_setApprovalForAll:
	txn OnCompletion
	int NoOp
	==
	txn ApplicationID
	int 0
	!=
	&&
	assert
	byte 0x
	txna ApplicationArgs 2
	int 0
	getbit
	txna ApplicationArgs 1
	callsub arc72_setApprovalForAll
	int 1
	return

arc72_setApprovalForAll:
	proto 3 0

	// examples/arc72/arc72.algo.ts:79
	// key: Control = { owner: this.txn.sender, controller: operator }
	txn Sender
	frame_dig -1 // operator: address
	concat
	frame_bury -3 // key: Control

	// if1_condition
	// examples/arc72/arc72.algo.ts:81
	// approved
	frame_dig -2 // approved: bool
	bz if1_elseif1_condition

	// if1_consequent
	// examples/arc72/arc72.algo.ts:81
	// this.controlBox.set(key, '')
	frame_dig -3 // key: Control
	dup
	box_del
	pop
	byte ""
	dup
	len
	itob
	extract 6 2
	swap
	concat
	box_put
	b if1_end

if1_elseif1_condition:
	// examples/arc72/arc72.algo.ts:82
	// this.controlBox.exists(key)
	frame_dig -3 // key: Control
	box_len
	swap
	pop
	bz if1_end

	// if1_elseif1_consequent
	// examples/arc72/arc72.algo.ts:82
	// this.controlBox.delete(key)
	frame_dig -3 // key: Control
	box_del

if1_end:
	retsub

abi_route_mint:
	txn OnCompletion
	int NoOp
	==
	txn ApplicationID
	int 0
	!=
	&&
	assert
	byte 0x; dup
	txna ApplicationArgs 1
	callsub mint
	int 1
	return

mint:
	proto 3 0

	// examples/arc72/arc72.algo.ts:86
	// index = this.index.get()
	byte "index"
	app_global_get
	frame_bury -2 // index: uint256

	// examples/arc72/arc72.algo.ts:88
	// token: Token = {
	frame_dig -1 // to: address
	byte "https://github.com/algorandfoundation/ARCs                                                                                                                                                                                                                      "
	concat
	global ZeroAddress
	concat
	frame_bury -3 // token: Token

	// examples/arc72/arc72.algo.ts:94
	// this.tokenBox.set(index, token)
	frame_dig -2 // index: uint256
	frame_dig -3 // token: Token
	box_put

	// examples/arc72/arc72.algo.ts:95
	// this.transferTo(to, index)
	// no dupn needed
	frame_dig -2 // index: uint256
	frame_dig -1 // to: address
	callsub transferTo

	// examples/arc72/arc72.algo.ts:96
	// this.index.set(index + (1 as uint<256>))
	byte "index"
	frame_dig -2 // index: uint256
	int 1
	itob
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	b+
	app_global_put
	retsub

abi_route_arc72_totalSupply:
	txn OnCompletion
	int NoOp
	==
	txn ApplicationID
	int 0
	!=
	&&
	assert

	// no dupn needed
	callsub arc72_totalSupply
	int 1
	return

arc72_totalSupply:
	proto 0 0

	// examples/arc72/arc72.algo.ts:103
	// return this.index.get();
	byte "index"
	app_global_get
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	byte 0x151f7c75
	swap
	concat
	log
	retsub

abi_route_arc72_tokenByIndex:
	txn OnCompletion
	int NoOp
	==
	txn ApplicationID
	int 0
	!=
	&&
	assert

	// no dupn needed
	txna ApplicationArgs 1
	callsub arc72_tokenByIndex
	int 1
	return

arc72_tokenByIndex:
	proto 1 0

	// examples/arc72/arc72.algo.ts:110
	// return index;
	frame_dig -1 // index: uint256
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	byte 0x151f7c75
	swap
	concat
	log
	retsub

main:
	txn NumAppArgs
	bnz route_abi

	// default createApplication
	txn ApplicationID
	int 0
	==
	txn OnCompletion
	int NoOp
	==
	&&
	return

route_abi:
	method "arc72_ownerOf(uint256)address"
	method "arc72_tokenURI(uint256)byte[256]"
	method "arc72_transferFrom(address,address,uint256)void"
	method "arc72_approve(address,uint256)void"
	method "arc72_setApprovalForAll(address,bool)void"
	method "mint(address)void"
	method "arc72_totalSupply()uint256"
	method "arc72_tokenByIndex(uint256)uint256"
	txna ApplicationArgs 0
	match abi_route_arc72_ownerOf abi_route_arc72_tokenURI abi_route_arc72_transferFrom abi_route_arc72_approve abi_route_arc72_setApprovalForAll abi_route_mint abi_route_arc72_totalSupply abi_route_arc72_tokenByIndex
	err